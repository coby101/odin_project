class TicTacToeBoard

  private

  def display_cell(row, col)
    cell(row, col) || '_'
  end
  def cell(row, col)
    @board[row][col]
  end
  def mark_sqr(row, col, str)
    @board[row][col] = str
  end
  
  public

  def initialize 
    clear
  end

  def clear
    @board = [[nil, nil, nil], [nil, nil, nil], [nil, nil, nil]]
  end

  def full?
    @board.all? { |row| row.all? }
  end
  
  def display
    puts "\n        1_2_3"
    puts "      a|#{display_cell(0, 0)}|#{display_cell(0, 1)}|#{display_cell(0, 2)}|"
    puts "      b|#{display_cell(1, 0)}|#{display_cell(1, 1)}|#{display_cell(1, 2)}|"
    puts "      c|#{display_cell(2, 0)}|#{display_cell(2, 1)}|#{display_cell(2, 2)}|\n\n"
  end

  def record_play(token, row, col)
    if ('a'..'c').include?(row.to_s.downcase) then
      _row = case row.to_s.downcase when 'a' then 0 when 'b' then 1 when 'c' then 2 end
    else
      raise "Row must be in range \"a\" to \"c\". Row specified was #{row}"
    end

    if col.to_i.to_s != col.to_s then
      "Row must be an integer. Value specified is #{row}"
    elsif !(1..3).include?(col.to_i) then
      raise "Column must be in range 1..3. Column specified was #{col}"
    else _col = col.to_i - 1 
    end
    
    if token.length != 1 then
      raise "This board requires token strings of length 1.  This token is length #{token.length}"
    elsif cell(_row, _col) then
      raise "This space is taken by \"#{cell(_row, _col)}\""
    else mark_sqr(_row, _col, token)
    end
  end
    
  def winner
    token = @board[0][0]
    if (@board[0][1] == token && @board[0][2] == token) or (@board[1][0] == token && @board[2][0] == token)
      return token
    end
    token = @board[1][1]
    if (@board[1][0] == token && @board[1][2] == token) or
      (@board[0][1] == token && @board[2][1] == token) or
      (@board[0][0] == token && @board[2][2] == token) or
      (@board[0][2] == token && @board[2][0] == token)
      return token
    end
    token = @board[2][2]
    if (@board[2][0] == token && @board[2][1] == token) or (@board[0][2] == token && @board[1][2] == token)
      return token
    end
  end
end

